{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-03-08T11:26:41.331Z",
    "end": "2025-03-08T11:26:58.967Z",
    "duration": 17636,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "c6117c5f-2e15-4813-a7b0-a2c22da1c23c",
      "title": "",
      "fullFile": "cypress\\e2e\\loginData.cy.js",
      "file": "cypress\\e2e\\loginData.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d12cb04d-d5e1-41b0-b43e-7e5c1e271009",
          "title": "Login Module - Data Driven Testing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Testing Multiple Login Scenarios",
              "fullTitle": "Login Module - Data Driven Testing Testing Multiple Login Scenarios",
              "timedOut": null,
              "duration": 17522,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(\"Starting multiple login scenarios\");\n// Load test data from fixture\ncy.fixture(\"data/test-data.xlsx\", \"binary\").then(excelFile => {\n  const workbook = XLSX.read(excelFile, {\n    type: \"binary\"\n  });\n  const sheetName = workbook.SheetNames[0];\n  const testData = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\n  testData.forEach(user => {\n    cy.log(`Entering username: ${user.username}`);\n    _LoginPage.default.enterUsername(user.username);\n    cy.log(`Entering password for user: ${user.username}`);\n    _LoginPage.default.enterPassword(user.password);\n    _LoginPage.default.clickLogin();\n    cy.log(`Checking expected result: ${user.expectedResult}`);\n    // check the expected result based on the test data\n    if (user.expectedResult === \"dashboard\") {\n      // Verify successful login\n      _LoginPage.default.verifyDashboard();\n      // Logout before next test\n      _LoginPage.default.logout();\n    } else if (user.expectedResult === \"Invalid credentials\") {\n      // Verify error message\n      _LoginPage.default.verifyErrorMessage();\n    } else if (user.expectedResult === \"Required\") {\n      // Verify error message\n      _LoginPage.default.verifyRequiredFields();\n    }\n    cy.log(\"Reloading the page before the next test\");\n    // Reload page before next test and wait for 1 second\n    cy.reload();\n    cy.wait(2000);\n  });\n});",
              "err": {},
              "uuid": "a919f1ab-3f36-4d6a-aa9d-e68c485fd187",
              "parentUUID": "d12cb04d-d5e1-41b0-b43e-7e5c1e271009",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a919f1ab-3f36-4d6a-aa9d-e68c485fd187"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17522,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress\\reports\\html\\.jsons"
      },
      "version": "6.2.0"
    }
  }
}